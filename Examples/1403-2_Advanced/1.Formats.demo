~$global:ProgressPreference = 'SilentlyContinue'
~if( -not ( Get-Module dataONTAP ) ){ Import-Module dataONTAP }
~$cred = [System.Management.Automation.PSCredential]::new( 'admin', $( ConvertTo-SecureString 'netapp123' -AsPlainText -Force ) )
~Connect-NcController -Name Cluster96 -Credential $cred | Out-Null
~if( Get-Module Insight ){ Remove-Module Insight }
~Clear-Host
###################################################################################
# Welcome to NetApp Insight Session 1403-2
#
# Formats.ps1xml Demo
#
# Formats allow you control over what the user sees from the output. The command Get-NcAggrSpace
# currently doesn't have a formatted output.
Get-NcAggrSpace
#
# Notice the type of the output object
( Get-NcAggrSpace )[-1].GetType().FullName
#
# You can see the formats available using the following command
Get-FormatData -TypeName DataONTAP.C.Types.Aggr.SpaceInformation
#
# At this point I have a couple different options. I can user Format-Table to clean this up
Get-NcAggrSpace | Format-Table Aggregate, VolumeFootprints, AggregateMetadata, AggregateSize, PhysicalUsed
#
# The problem is that Format-Table results in a [FormatEndData] output type
( Get-NcAggrSpace | Format-Table Aggregate, VolumeFootprints, AggregateMetadata, AggregateSize, PhysicalUsed )[-1].GetType().FullName
#
# Why not Select-Object? you may ask
Get-NcAggrSpace | Select-Object  Aggregate, VolumeFootprints, AggregateMetadata, AggregateSize, PhysicalUsed
#
# Not very pretty but it does allow us to clean up the data with Calculated Properties
Get-NcAggrSpace | Select-Object  Aggregate, @{ N='VolumeFootprints';E={ ConvertTo-FormattedNumber -Value $_.VolumeFootprints -Type DataSize -NumberFormatString '0.00' } }
#
# So what happens to the underlying object?
( Get-NcAggrSpace | Select-Object  Aggregate, VolumeFootprints, AggregateMetadata, AggregateSize, PhysicalUsed )[-1].GetType().FullName
#
# Not what we wanted but is good to remember, we may be able to use this to our advantage later.
#
# A Format.ps1xml can be used to determine how the output is displayed. 
#
# # NOTE: When multiple formats are loaded for the same class the most recently loaded wins
#
code "$DemoRoot/../../Source/Insight.Format.ps1xml"
#
# Import the module to load the format
Import-Module "$DemoRoot/../../Source/Insight.psd1"
#
# When we rerun this command we see a nicely formatted output.
Get-NcAggrSpace
#
# The object is still the same object type and all properties still exist on the object
( Get-NcAggrSpace )[-1].GetType().FullName
Get-NcAggrSpace | Format-List
#
# You can see the formats available using the following command
Get-FormatData -TypeName DataONTAP.C.Types.Aggr.SpaceInformation
#
# You can use Format-Table to change the displayed output
Get-NcAggrSpace | Format-Table -View Space
( Get-NcAggrSpace | Format-Table -View Space )[-1].GetType().FullName
Get-NcAggrSpace | Format-Table -View SpacePercent
#
# If this view is one that you want to run all the time you can also retype the objects
#
code "$DemoRoot/../../Source/Get-NcAggrSpaceInfo.ps1"
#
Get-NcAggrSpaceInfo
#
( Get-NcAggrSpaceInfo )[-1].GetType().FullName
#
# This would also be a good way of doing formats on your custom objects
#
( Get-NcAggrSpaceInfo | Get-Member )[-1].typename
#
~Remove-Module Insight