~~$global:ProgressPreference = 'SilentlyContinue'
~~$clusterName = '172.16.32.30'
~if( Get-Module Insight ) { Remove-Module Insight }
~if( Get-Module dataONTAP ) { Remove-Module dataONTAP }
~Clear-Host
###############################  WARNING  #########################################
# Start a new PowerShell Session before loading this demo.
Start-Process PowerShell
Clear-Host
###################################################################################
# Welcome to NetApp Insight Session 1403-2
#
# DSC Demo
#
# Desired State Configuration (DSC) gives the admin the ability to manage a servers 
# configuration through the use of a MOF file that holds the key value inputs for DSC modules.
#
# The MOF file is generated by an authoring machine executing a 'configuration' function
# that calls special DSC PowerShell modules. 
#
# Typically a DSC resource has code for deploying, changing, and removing features on the
# system that the configuration is applied to. This doesn't mean DSC can not configure external
# resources. It just means we must establish a connection to the external resource.
# We must also accept a decentralized configuration of our NetApp resources.
#
# In this demo we are going to look at a DSC resource for the lifecycle management of
# NetApp ONTAP CIFS Shares. This means you can create, modify, and delete a CIFS share 
# via configuration data.
#
# This demo is meant to show a different way of scripting and bring more light to DSC.
#
# The module manifest is what exports the resource
Get-Content "$DemoRoot/../../Source/Insight.psd1"
#
# The NetAppCifsShare resource is held within the Insight Module.
# The module does not need to be in memory for the resource to be available.
Get-Module
#
# Use Get-DscResource to see the resources available to the authoring machine.
Get-DscResource -Module Insight
#
# Notice the resource is not found. This is because the dataontap module is not loaded.
# This is because there are Types that must be in memory before the class can load.
#
Import-Module dataONTAP
#
# You can now look at the resources within the module

Get-DscResource -Module Insight
#
# You should now be able to look at the syntax of the NetAppCifsShare resource
Get-DscResource -Name NetAppCifsShare -Module Insight -Syntax
#
# With this syntax you can add it to an existing DSC Configuration
# or call it directly from Invoke-DscResource.
#
###################################################################################
#               Calling directly with Invoke-DscResource
# Create a variable with the credentials to connect to the NetApp Cluster
$Credentials = [System.Management.Automation.PSCredential]::new( 'admin', $( ConvertTo-SecureString 'netapp123' -AsPlainText -Force ) )
#
# You then need a hash table with all of the configurations
$NetAppCifsShareConfig = @{ #USE SPACEBAR
    Name                   = 'NetAppCifsShareTest$'
    Path                   = '/'
    Vserver                = 'TestSVM'
    Controller             = $ClusterName
    Credential             = $Credentials
    Ensure                 = 'Present'
    ShareProperties        = @( 'oplocks', 'browsable', 'showsnapshot', 'changenotify' )
    SymlinkProperties      = @( 'hide' )
    Comment                = 'Created for Start-Demo'
    OfflineFilesMode       = 'documents'
    MaxConnectionsPerShare = 24
} #LAST LINE HIT ENTER TO EXECUTE
#
# You can display the contents of the hashtable by executing the variable name
$NetAppCifsShareConfig
#
# With a hashtable in memory you can now Invoke the dsc methods directly
# There are three methods within DSC
#   - Get()
#   - Set()
#   - Test()
# The get method pulls the current configuration of the resource and returns it
Invoke-DscResource -Name NetAppCifsShare -Method Get -ModuleName Insight -Property $NetAppCifsShareConfig
#
Invoke-DscResource -Name NetAppCifsShare -Method Test -ModuleName Insight -Property $NetAppCifsShareConfig
#
# The set method makes changes to the CIFS Share using configuration as the source of truth
Invoke-DscResource -Name NetAppCifsShare -Method Set -ModuleName Insight -Property $NetAppCifsShareConfig
#
# The test method validates each property of the CIFS Share
# against the provided configuration hashtable
Invoke-DscResource -Name NetAppCifsShare -Method Test -ModuleName Insight -Property $NetAppCifsShareConfig
#
# You can run the get method again to validate the configuration manually.
Invoke-DscResource -Name NetAppCifsShare -Method Get -ModuleName Insight -Property $NetAppCifsShareConfig
#
# You can also validate from the cli:
#        vserver cifs share show -vserver TestSVM -share-name NetAppCifsShareTest$
# Or with PowerShell
#
Get-NcCifsShare -Name 'NetAppCifsShareTest$' -VserverContext TestSVM
# Notice the class is establishing the connection to the cluster and not relying on my session
# As the DSC resource will be executing on remote machines each resourec will need to be able to 
# establish a session independently of other resources
#
Connect-NcController $ClusterName -Credential $Credentials
Get-NcCifsShare -Name 'NetAppCifsShareTest$' -VserverContext TestSVM | Format-Table -AutoSize
#
# Because this is configuration we can make changes to it at any point and rerun the set method
$NetAppCifsShareConfig['Comment'] = 'Start-Demo UPDATE 1'
#
Invoke-DscResource -Name NetAppCifsShare -Method Test -ModuleName Insight -Property $NetAppCifsShareConfig
Invoke-DscResource -Name NetAppCifsShare -Method Set -ModuleName Insight -Property $NetAppCifsShareConfig
Invoke-DscResource -Name NetAppCifsShare -Method Test -ModuleName Insight -Property $NetAppCifsShareConfig
Invoke-DscResource -Name NetAppCifsShare -Method Get -ModuleName Insight -Property $NetAppCifsShareConfig
#
# We can also ensure that the resoure isn't present.
$NetAppCifsShareConfig['Ensure'] = 'Absent'
#
Invoke-DscResource -Name NetAppCifsShare -Method Test -ModuleName Insight -Property $NetAppCifsShareConfig
Invoke-DscResource -Name NetAppCifsShare -Method Set -ModuleName Insight -Property $NetAppCifsShareConfig
#
# You can run the get method again to validate the configuration manually.
Invoke-DscResource -Name NetAppCifsShare -Method Get -ModuleName Insight -Property $NetAppCifsShareConfig
#
# As a final step we can run the test method again to validate we are still within
# the desired configuration.
Invoke-DscResource -Name NetAppCifsShare -Method Test -ModuleName Insight -Property $NetAppCifsShareConfig
#
( Get-Date ).ToString('HH:mm')
Clear-Host
###################################################################################
#                      Configuration Authoring
#
# Now that we understand how a DSC configuration could be created and how it would
# Interact with the NetApp Cluster. We can author a configuration then generate the
# MOF on the underlying system.
#
# Again we use Get-DscConfiguration to show us the syntax
#
Get-DscResource -Name NetAppCifsShare -Module Insight -Syntax
#
Get-Content "$DemoRoot/CifsShare.Configuration.ps1"
#
# We first load the configuration (function) into memory
. "$DemoRoot/CifsShare.Configuration.ps1"
#
# We can then pass in details to the 'configuration' using the ConfigurationData builtin parameter.
$configData = @{
    AllNodes = @(
        @{
            NodeName                    = 'localhost'
            PsDscAllowPlainTextPassword = $true
            Credential                  = [System.Management.Automation.PSCredential]::new( 'admin', $( ConvertTo-SecureString 'netapp123' -AsPlainText -Force ) )
        }
    )
} #LAST LINE
#
Set-Location -Path "$DemoRoot\..\..\artifacts"
NetAppCifsShareTest -ConfigurationData $configData
Get-ChildItem
Get-ChildItem NetAppCifsShareTest
Set-Location -Path $DemoRoot
Clear-Host
#
###################################################################################
#                      Behavior Driven Development
#
# In the spirit of Behavior Driven Development all new features added to the module should come with
# Gherkin test for the specific scenarios within the feature
Get-Content "$DemoRoot\..\..\Specs\NetAppCifsShare.feature"
#
# The tests can be run using the pester module
Import-Module Pester
#
# Gherkin tests actually run the code against a physical NetApp Cluster.
# This means the test must have any prerequisites create, e.g. volumes, qtrees, etc.
Invoke-Gherkin -Path "$DemoRoot\..\..\Specs\"
